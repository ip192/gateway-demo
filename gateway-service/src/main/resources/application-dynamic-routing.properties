# Dynamic Routing Configuration Profile
# This profile demonstrates custom gateway routing configuration structure
# Converted from application-dynamic-routing.yml and application-dynamic-routing-example.yml

# ===================================================================
# CUSTOM GATEWAY ROUTES CONFIGURATION
# ===================================================================

# User Service Routes
gateway.routes[0].id=user-service-routes
gateway.routes[0].uri=http://localhost:8081
gateway.routes[0].predicates[0].name=Path
gateway.routes[0].predicates[0].args.pattern=/user/**
gateway.routes[0].filters[0].name=CircuitBreaker
gateway.routes[0].filters[0].args.name=user-service-cb
gateway.routes[0].filters[0].args.fallbackUri=forward:/fallback/user
gateway.routes[0].filters[1].name=Retry
gateway.routes[0].filters[1].args.retries=3
gateway.routes[0].filters[1].args.firstBackoff=50ms
gateway.routes[0].filters[1].args.maxBackoff=500ms
gateway.routes[0].filters[2].name=AddRequestHeader
gateway.routes[0].filters[2].args.name=X-Gateway-Source
gateway.routes[0].filters[2].args.value=dynamic-routing
gateway.routes[0].metadata.timeout=5000
gateway.routes[0].metadata.enabled=true
gateway.routes[0].metadata.order=1

# Product Service Routes
gateway.routes[1].id=product-service-routes
gateway.routes[1].uri=http://localhost:8082
gateway.routes[1].predicates[0].name=Path
gateway.routes[1].predicates[0].args.pattern=/product/**
gateway.routes[1].predicates[1].name=Method
gateway.routes[1].predicates[1].args.method=GET,POST
gateway.routes[1].filters[0].name=CircuitBreaker
gateway.routes[1].filters[0].args.name=product-service-cb
gateway.routes[1].filters[0].args.fallbackUri=forward:/fallback/product
gateway.routes[1].filters[1].name=Retry
gateway.routes[1].filters[1].args.retries=2
gateway.routes[1].filters[1].args.firstBackoff=100ms
gateway.routes[1].filters[1].args.maxBackoff=1000ms
gateway.routes[1].filters[2].name=StripPrefix
gateway.routes[1].filters[2].args.parts=1
gateway.routes[1].metadata.timeout=3000
gateway.routes[1].metadata.enabled=true
gateway.routes[1].metadata.order=2

# Admin Service Routes (Example - Disabled)
gateway.routes[2].id=admin-service-routes
gateway.routes[2].uri=http://localhost:8083
gateway.routes[2].predicates[0].name=Path
gateway.routes[2].predicates[0].args.pattern=/admin/**
gateway.routes[2].predicates[1].name=Header
gateway.routes[2].predicates[1].args.header=X-Admin-Token
gateway.routes[2].predicates[1].args.regexp=admin-.*
gateway.routes[2].filters[0].name=AddResponseHeader
gateway.routes[2].filters[0].args.name=X-Admin-Response
gateway.routes[2].filters[0].args.value=processed
gateway.routes[2].metadata.timeout=10000
gateway.routes[2].metadata.enabled=false
gateway.routes[2].metadata.order=10

# ===================================================================
# GLOBAL CIRCUIT BREAKER CONFIGURATION
# ===================================================================

# Global circuit breaker defaults
gateway.circuitBreaker.failureRateThreshold=50
gateway.circuitBreaker.waitDurationInOpenState=10000
gateway.circuitBreaker.slidingWindowSize=10
gateway.circuitBreaker.minimumNumberOfCalls=5

# ===================================================================
# GLOBAL RETRY CONFIGURATION
# ===================================================================

# Global retry defaults
gateway.retry.retries=3
gateway.retry.firstBackoff=50
gateway.retry.maxBackoff=500
gateway.retry.factor=2.0

# ===================================================================
# STANDARD SPRING CLOUD GATEWAY ROUTES (Alternative Format)
# ===================================================================
# These demonstrate the standard Spring Cloud Gateway configuration format
# alongside the custom gateway.routes structure above

# User Service Route (Standard Format)
spring.cloud.gateway.routes[0].id=user-service-standard
spring.cloud.gateway.routes[0].uri=http://localhost:8081
spring.cloud.gateway.routes[0].predicates[0]=Path=/user-std/**
spring.cloud.gateway.routes[0].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[0].filters[0].args.name=user-service-cb
spring.cloud.gateway.routes[0].filters[0].args.fallbackUri=forward:/fallback/user
spring.cloud.gateway.routes[0].filters[1].name=RewritePath
spring.cloud.gateway.routes[0].filters[1].args.regexp=/user-std/(?<segment>.*)
spring.cloud.gateway.routes[0].filters[1].args.replacement=/user/$\{segment}
spring.cloud.gateway.routes[0].metadata.timeout=5000
spring.cloud.gateway.routes[0].metadata.enabled=true
spring.cloud.gateway.routes[0].metadata.order=100

# Product Service Route (Standard Format)
spring.cloud.gateway.routes[1].id=product-service-standard
spring.cloud.gateway.routes[1].uri=http://localhost:8082
spring.cloud.gateway.routes[1].predicates[0]=Path=/product-std/**
spring.cloud.gateway.routes[1].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[1].filters[0].args.name=product-service-cb
spring.cloud.gateway.routes[1].filters[0].args.fallbackUri=forward:/fallback/product
spring.cloud.gateway.routes[1].filters[1].name=RewritePath
spring.cloud.gateway.routes[1].filters[1].args.regexp=/product-std/(?<segment>.*)
spring.cloud.gateway.routes[1].filters[1].args.replacement=/product/$\{segment}
spring.cloud.gateway.routes[1].metadata.timeout=3000
spring.cloud.gateway.routes[1].metadata.enabled=true
spring.cloud.gateway.routes[1].metadata.order=101

# ===================================================================
# DYNAMIC ROUTING EXAMPLES
# ===================================================================

# Example: Route with multiple predicates and filters
spring.cloud.gateway.routes[2].id=complex-route-example
spring.cloud.gateway.routes[2].uri=http://localhost:8084
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/v1/**
spring.cloud.gateway.routes[2].predicates[1]=Method=GET,POST,PUT
spring.cloud.gateway.routes[2].predicates[2]=Header=X-API-Version,v1
spring.cloud.gateway.routes[2].filters[0].name=AddRequestHeader
spring.cloud.gateway.routes[2].filters[0].args.name=X-Gateway-Route
spring.cloud.gateway.routes[2].filters[0].args.value=complex-example
spring.cloud.gateway.routes[2].filters[1].name=AddResponseHeader
spring.cloud.gateway.routes[2].filters[1].args.name=X-Response-Time
spring.cloud.gateway.routes[2].filters[1].args.value=#{T(System).currentTimeMillis()}
spring.cloud.gateway.routes[2].filters[2].name=CircuitBreaker
spring.cloud.gateway.routes[2].filters[2].args.name=complex-service-cb
spring.cloud.gateway.routes[2].filters[2].args.fallbackUri=forward:/fallback/complex
spring.cloud.gateway.routes[2].metadata.timeout=8000
spring.cloud.gateway.routes[2].metadata.enabled=true
spring.cloud.gateway.routes[2].metadata.order=200

# Example: Route with weight-based load balancing
spring.cloud.gateway.routes[3].id=weighted-route-example-1
spring.cloud.gateway.routes[3].uri=http://localhost:8085
spring.cloud.gateway.routes[3].predicates[0]=Path=/weighted/**
spring.cloud.gateway.routes[3].predicates[1]=Weight=group1,8
spring.cloud.gateway.routes[3].filters[0].name=AddRequestHeader
spring.cloud.gateway.routes[3].filters[0].args.name=X-Service-Instance
spring.cloud.gateway.routes[3].filters[0].args.value=instance-1
spring.cloud.gateway.routes[3].metadata.timeout=5000
spring.cloud.gateway.routes[3].metadata.enabled=true
spring.cloud.gateway.routes[3].metadata.order=300

spring.cloud.gateway.routes[4].id=weighted-route-example-2
spring.cloud.gateway.routes[4].uri=http://localhost:8086
spring.cloud.gateway.routes[4].predicates[0]=Path=/weighted/**
spring.cloud.gateway.routes[4].predicates[1]=Weight=group1,2
spring.cloud.gateway.routes[4].filters[0].name=AddRequestHeader
spring.cloud.gateway.routes[4].filters[0].args.name=X-Service-Instance
spring.cloud.gateway.routes[4].filters[0].args.value=instance-2
spring.cloud.gateway.routes[4].metadata.timeout=5000
spring.cloud.gateway.routes[4].metadata.enabled=true
spring.cloud.gateway.routes[4].metadata.order=301