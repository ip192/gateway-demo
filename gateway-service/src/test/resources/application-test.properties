# Test Configuration for Gateway Service
# Spring Cloud Gateway Routes Configuration for Testing

# User Service Test Route
spring.cloud.gateway.routes[0].id=user-service-test
spring.cloud.gateway.routes[0].uri=http://localhost:8081
spring.cloud.gateway.routes[0].predicates[0]=Path=/user/**
spring.cloud.gateway.routes[0].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[0].filters[0].args.name=user-service-cb
spring.cloud.gateway.routes[0].filters[0].args.fallbackUri=forward:/fallback/user
spring.cloud.gateway.routes[0].filters[1].name=Retry
spring.cloud.gateway.routes[0].filters[1].args.retries=3
spring.cloud.gateway.routes[0].filters[1].args.statuses=BAD_GATEWAY,SERVICE_UNAVAILABLE,GATEWAY_TIMEOUT
spring.cloud.gateway.routes[0].filters[1].args.methods=GET,POST,PUT,DELETE
spring.cloud.gateway.routes[0].filters[1].args.backoff.firstBackoff=50ms
spring.cloud.gateway.routes[0].filters[1].args.backoff.maxBackoff=500ms
spring.cloud.gateway.routes[0].filters[1].args.backoff.factor=2
spring.cloud.gateway.routes[0].filters[1].args.backoff.basedOnPreviousValue=false

# Product Service Test Route
spring.cloud.gateway.routes[1].id=product-service-test
spring.cloud.gateway.routes[1].uri=http://localhost:8082
spring.cloud.gateway.routes[1].predicates[0]=Path=/product/**
spring.cloud.gateway.routes[1].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[1].filters[0].args.name=product-service-cb
spring.cloud.gateway.routes[1].filters[0].args.fallbackUri=forward:/fallback/product
spring.cloud.gateway.routes[1].filters[1].name=Retry
spring.cloud.gateway.routes[1].filters[1].args.retries=3
spring.cloud.gateway.routes[1].filters[1].args.statuses=BAD_GATEWAY,SERVICE_UNAVAILABLE,GATEWAY_TIMEOUT
spring.cloud.gateway.routes[1].filters[1].args.methods=GET,POST,PUT,DELETE
spring.cloud.gateway.routes[1].filters[1].args.backoff.firstBackoff=50ms
spring.cloud.gateway.routes[1].filters[1].args.backoff.maxBackoff=500ms
spring.cloud.gateway.routes[1].filters[1].args.backoff.factor=2
spring.cloud.gateway.routes[1].filters[1].args.backoff.basedOnPreviousValue=false

# Resilience4j Circuit Breaker Configuration for Testing
# User Service Circuit Breaker
resilience4j.circuitbreaker.instances.user-service-cb.slidingWindowSize=5
resilience4j.circuitbreaker.instances.user-service-cb.minimumNumberOfCalls=3
resilience4j.circuitbreaker.instances.user-service-cb.failureRateThreshold=50
resilience4j.circuitbreaker.instances.user-service-cb.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.user-service-cb.permittedNumberOfCallsInHalfOpenState=2
resilience4j.circuitbreaker.instances.user-service-cb.registerHealthIndicator=true

# Product Service Circuit Breaker
resilience4j.circuitbreaker.instances.product-service-cb.slidingWindowSize=5
resilience4j.circuitbreaker.instances.product-service-cb.minimumNumberOfCalls=3
resilience4j.circuitbreaker.instances.product-service-cb.failureRateThreshold=50
resilience4j.circuitbreaker.instances.product-service-cb.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.product-service-cb.permittedNumberOfCallsInHalfOpenState=2
resilience4j.circuitbreaker.instances.product-service-cb.registerHealthIndicator=true

# Time Limiter Configuration for Testing
resilience4j.timelimiter.instances.user-service-cb.timeoutDuration=2s
resilience4j.timelimiter.instances.product-service-cb.timeoutDuration=2s

# HTTP Client Configuration for Testing
spring.cloud.gateway.httpclient.connect-timeout=2000
spring.cloud.gateway.httpclient.response-timeout=3s

# Logging Configuration for Tests
logging.level.com.example.gateway=DEBUG
logging.level.org.springframework.cloud.gateway=DEBUG
logging.level.io.github.resilience4j=DEBUG