# Circuit Breaker Profile Configuration
# This profile provides enhanced circuit breaker configurations for different services

# Spring Cloud Gateway Routes with Circuit Breaker and Retry Filters

# User Service Route with Circuit Breaker
spring.cloud.gateway.routes[0].id=user-service-with-cb
spring.cloud.gateway.routes[0].uri=http://localhost:8081
spring.cloud.gateway.routes[0].predicates[0]=Path=/user/**
spring.cloud.gateway.routes[0].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[0].filters[0].args.name=user-service-cb
spring.cloud.gateway.routes[0].filters[0].args.fallbackUri=forward:/fallback/user
spring.cloud.gateway.routes[0].filters[1].name=Retry
spring.cloud.gateway.routes[0].filters[1].args.retries=3
spring.cloud.gateway.routes[0].filters[1].args.statuses=BAD_GATEWAY,SERVICE_UNAVAILABLE,GATEWAY_TIMEOUT
spring.cloud.gateway.routes[0].filters[1].args.methods=GET,POST,PUT,DELETE
spring.cloud.gateway.routes[0].filters[1].args.backoff.firstBackoff=50ms
spring.cloud.gateway.routes[0].filters[1].args.backoff.maxBackoff=500ms
spring.cloud.gateway.routes[0].filters[1].args.backoff.factor=2
spring.cloud.gateway.routes[0].filters[1].args.backoff.basedOnPreviousValue=false

# Product Service Route with Circuit Breaker
spring.cloud.gateway.routes[1].id=product-service-with-cb
spring.cloud.gateway.routes[1].uri=http://localhost:8082
spring.cloud.gateway.routes[1].predicates[0]=Path=/product/**
spring.cloud.gateway.routes[1].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[1].filters[0].args.name=product-service-cb
spring.cloud.gateway.routes[1].filters[0].args.fallbackUri=forward:/fallback/product
spring.cloud.gateway.routes[1].filters[1].name=Retry
spring.cloud.gateway.routes[1].filters[1].args.retries=3
spring.cloud.gateway.routes[1].filters[1].args.statuses=BAD_GATEWAY,SERVICE_UNAVAILABLE,GATEWAY_TIMEOUT
spring.cloud.gateway.routes[1].filters[1].args.methods=GET,POST,PUT,DELETE
spring.cloud.gateway.routes[1].filters[1].args.backoff.firstBackoff=50ms
spring.cloud.gateway.routes[1].filters[1].args.backoff.maxBackoff=500ms
spring.cloud.gateway.routes[1].filters[1].args.backoff.factor=2
spring.cloud.gateway.routes[1].filters[1].args.backoff.basedOnPreviousValue=false

# Resilience4j Circuit Breaker Configuration

# User Service Circuit Breaker Instance
resilience4j.circuitbreaker.instances.user-service-cb.slidingWindowSize=10
resilience4j.circuitbreaker.instances.user-service-cb.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.user-service-cb.failureRateThreshold=50
resilience4j.circuitbreaker.instances.user-service-cb.waitDurationInOpenState=10s
resilience4j.circuitbreaker.instances.user-service-cb.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.user-service-cb.registerHealthIndicator=true

# Product Service Circuit Breaker Instance
resilience4j.circuitbreaker.instances.product-service-cb.slidingWindowSize=15
resilience4j.circuitbreaker.instances.product-service-cb.minimumNumberOfCalls=8
resilience4j.circuitbreaker.instances.product-service-cb.failureRateThreshold=55
resilience4j.circuitbreaker.instances.product-service-cb.waitDurationInOpenState=12s
resilience4j.circuitbreaker.instances.product-service-cb.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.product-service-cb.registerHealthIndicator=true

# Time Limiter Configuration

# User Service Time Limiter
resilience4j.timelimiter.instances.user-service-cb.timeoutDuration=3s

# Product Service Time Limiter
resilience4j.timelimiter.instances.product-service-cb.timeoutDuration=4s

# HTTP Client Configuration
spring.cloud.gateway.httpclient.connect-timeout=5000
spring.cloud.gateway.httpclient.response-timeout=10s

# Circuit Breaker Specific Management Endpoints Configuration
management.endpoints.web.exposure.include=health,circuitbreakers,circuitbreakerevents
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true